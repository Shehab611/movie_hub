// Mocks generated by Mockito 5.4.4 from annotations
// in movie_hub/test/unit_testing/authentication/register/mocks/register.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes

part of 'register.dart';

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [RegisterRemoteDataSourceTest].
///
/// See the documentation for Mockito's code generation for more information.
class MockRegisterRemoteDataSourceTest extends Mock
    implements RegisterRemoteDataSourceTest {
  MockRegisterRemoteDataSourceTest() {
    throwOnMissingStub(this);
  }

  @override
  Future<FirebaseAuthResponse> userRegister(RegisterParameters? parameters) =>
      (super.noSuchMethod(
        Invocation.method(
          #userRegister,
          [parameters],
        ),
        returnValue:
            Future<FirebaseAuthResponse>.value(dummyValue<FirebaseAuthResponse>(
          this,
          Invocation.method(
            #userRegister,
            [parameters],
          ),
        )),
      ) as Future<FirebaseAuthResponse>);
}

/// A class which mocks [FirebaseAuthFailureTest].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseAuthFailureTest extends Mock
    implements FirebaseAuthFailureTest {
  MockFirebaseAuthFailureTest() {
    throwOnMissingStub(this);
  }

  @override
  String get errorMessage => (super.noSuchMethod(
        Invocation.getter(#errorMessage),
        returnValue: dummyValue<String>(
          this,
          Invocation.getter(#errorMessage),
        ),
      ) as String);
}

/// A class which mocks [RegisterRepositoryTest].
///
/// See the documentation for Mockito's code generation for more information.
class MockRegisterRepositoryTest extends Mock
    implements RegisterRepositoryTest {
  MockRegisterRepositoryTest() {
    throwOnMissingStub(this);
  }

  @override
  Future<DataResponse> userRegister(RegisterParameters parameters) =>
      (super.noSuchMethod(
        Invocation.method(
          #userRegister,
          [parameters],
        ),
        returnValue: Future<DataResponse>.value(dummyValue<DataResponse>(
          this,
          Invocation.method(
            #userRegister,
            [parameters],
          ),
        )),
      ) as Future<DataResponse>);
}

/// A class which mocks [RegisterUseCaseTest].
///
/// See the documentation for Mockito's code generation for more information.
class MockRegisterUseCaseTest extends Mock implements RegisterUseCaseTest {
  MockRegisterUseCaseTest() {
    throwOnMissingStub(this);
  }

  @override
  Future<DataResponse> call(Parameters? p) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [p],
        ),
        returnValue: Future<DataResponse>.value(dummyValue<DataResponse>(
          this,
          Invocation.method(
            #call,
            [p],
          ),
        )),
      ) as Future<DataResponse>);
}
